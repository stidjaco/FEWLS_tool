// Get California
var CV = ee.FeatureCollection("users/stidjaco/CV_Boundary").union(1000)
    
// Get LandID
var lanid = ee.Image('users/xyhuwmir4/LANID/LANID_v1_rse').unmask(0).clip(CV);

// Get arrays
var arrays = ee.FeatureCollection("users/stidjaco/CV_CoLocated_Solar_df")

// Change band names to number
var lanid = lanid.select(['irMap07', 'irMap08', 'irMap09', 'irMap10', 'irMap11', 'irMap12', 'irMap13', 'irMap14', 'irMap15', 
                          'irMap16', 'irMap17']).rename(['2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015',
                           '2016', '2017'])

// Run function to select proper year and extract max irrigated or not (1=irrig, 0=no irrig)
var arrays_wirrig = arrays.map(function(feature){
  // Get year and clipped image
  var YOD = feature.getNumber('Yr_inst')
  var band = ee.String(ee.Number(YOD).subtract(1).toInt())
  // Reduce region to find if land was irrigated that year
  var irrig_wnull = lanid.select(band).reduceRegion({
      reducer: ee.Reducer.max(),
      geometry: feature.geometry(),
      scale: 30,
      maxPixels: 1e13
    }).getNumber(band);
  // If no irrig within shape, set to 0
  var irrig = ee.Number(ee.Algorithms.If(irrig_wnull, irrig_wnull, 0)).toInt();
  return feature.set({irrig: irrig})
})

// Export shp to drive
Export.table.toDrive({
  collection: arrays_wirrig,
  description:'PV_ID_CV_irrig',
  fileFormat: 'CSV',
  selectors: ['Index', 'irrig'] 
});

// Visualize
//print(lanid)
var lanidAll = lanid.reduce(ee.Reducer.sum())
Map.addLayer(lanidAll, {min:1, max:11, palette:['blue','yellow','red']}, 'lanid sum')